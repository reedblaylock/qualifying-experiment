function runTrainingPhaseOne(state, blockName, blockOrder)
%% Play the metronome
% Get audio
[snd, nmatMetronome] = getMetronome(state, blockName);

% Prepare audio
PsychPortAudio('FillBuffer', state.pahandle, [snd; snd]);

% Show instructions
text = 'First, listen to the metronome.\n';
iBlockName = find(strcmp(state.blockNames, blockName));
if ~(blockOrder(1) == iBlockName) % This isn't your first time hearing a metronome
	text = [text ...
			'It may be different from metronomes you have already heard in this experiment.\n' ...
			];
end
text = [text ...
		'Press the Space Bar to listen.' ...
		];
showInstructions(state, text);

% Play audio
playAudio(state);

% Wait until audio is done playing + 1 second, then continue
midiDuration = getMidiDuration(nmatMetronome);
WaitSecs(midiDuration + 1);

%% Play the melody
% Get audio
[snd, nmatMelody] = getMelody(state, blockName);

% Prepare audio
PsychPortAudio('FillBuffer', state.pahandle, [snd; snd]);

% Show instructions
text = 'Next, listen to the melody.\n';
if ~(blockOrder(1) == iBlockName) % This isn't your first time hearing a melody
	text = [text ...
			'It may be different from melodies you have already heard in this experiment.\n' ...
			];
end
text = [text ...
		'Press the Space Bar to listen.' ...
		];
showInstructions(state, text);

% Play audio
playAudio(state);

% Wait until audio is done playing + 1 second, then continue
midiDuration = getMidiDuration(nmatMelody);
WaitSecs(midiDuration + 1);

[snd, nmat] = getMelodyWithMetronome(state, blockName);

% %% Play the melody
% % Generate next midi grid
% nmat = generateMidiGrid(state, state.blocks.(blockName).melody);
% nmatMelody = nmat;
% 
% % Buffer the sound
% prepareAudio(state, nmat);
% 
% text = 'Next, listen to the melody.\n';
% if ~(blockOrder(1) == iBlockName) % This isn't your first time hearing a melody
% 	text = [text ...
% 			'It may be different from melodies you have already heard in this experiment.\n' ...
% 			];
% end
% text = [text ...
% 		'Press the Space Bar to listen.' ...
% 		];
% showInstructions(state, text);
% 
% % Play the sound
% playAudio(state);
% 
% % Click to continue
% midiDuration = getMidiDuration(nmat);
% WaitSecs(midiDuration + 1);
% % KbStrokeWait;



% Get audio
filename = state.blocks.(blockName).melody.wav;
filename = [filename(1:end-4) '_withmetronome_' state.voiceType filename(end-3:end)];
[snd, ~] = audioread(filename);
nmatMetronomeAndMelody = concatenateMetronomeAndMelody(nmatMetronome, nmatMelody);

% Prepare audio
PsychPortAudio('FillBuffer', state.pahandle, [snd; snd]);

% Show instructions
text = 'Next, listen to the melody.\n';
if ~(blockOrder(1) == iBlockName) % This isn't your first time hearing a melody
	text = [text ...
			'It may be different from melodies you have already heard in this experiment.\n' ...
			];
end
text = [text ...
		'Press the Space Bar to listen.' ...
		];
showInstructions(state, text);

% Play audio
playAudio(state);

% Wait until audio is done playing + 1 second, then continue
midiDuration = getMidiDuration(nmatMetronomeAndMelody);
WaitSecs(midiDuration + 1);



% %% Play the metronome and melody together
% % Generate next midi grid
% nmat = concatenateMetronomeAndMelody(nmatMetronome, nmatMelody);
% 
% % Buffer the sound
% prepareAudio(state, nmat);
% 
% text = ['Now, listen to the metronome and melody together.\n' ...
% 		'Press the Space Bar to listen.' ...
% 		];
% showInstructions(state, text);
% 
% % Play the sound
% playAudio(state);
% 
% % Click to continue
% midiDuration = getMidiDuration(nmat);
% WaitSecs(midiDuration + 1);
% % KbStrokeWait;

end